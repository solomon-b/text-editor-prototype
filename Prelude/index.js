// Generated by purs version 0.14.1
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_DivisionRing = require("../Data.DivisionRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Field = require("../Data.Field/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_NaturalTransformation = require("../Data.NaturalTransformation/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
module.exports = {
    Applicative: Control_Applicative.Applicative,
    liftA1: Control_Applicative.liftA1,
    pure: Control_Applicative.pure,
    unless: Control_Applicative.unless,
    when: Control_Applicative.when,
    Apply: Control_Apply.Apply,
    apply: Control_Apply.apply,
    Bind: Control_Bind.Bind,
    Discard: Control_Bind.Discard,
    bind: Control_Bind.bind,
    discard: Control_Bind.discard,
    ifM: Control_Bind.ifM,
    join: Control_Bind.join,
    Category: Control_Category.Category,
    identity: Control_Category.identity,
    Monad: Control_Monad.Monad,
    ap: Control_Monad.ap,
    liftM1: Control_Monad.liftM1,
    unlessM: Control_Monad.unlessM,
    whenM: Control_Monad.whenM,
    Semigroupoid: Control_Semigroupoid.Semigroupoid,
    compose: Control_Semigroupoid.compose,
    otherwise: Data_Boolean.otherwise,
    BooleanAlgebra: Data_BooleanAlgebra.BooleanAlgebra,
    Bounded: Data_Bounded.Bounded,
    bottom: Data_Bounded.bottom,
    top: Data_Bounded.top,
    CommutativeRing: Data_CommutativeRing.CommutativeRing,
    DivisionRing: Data_DivisionRing.DivisionRing,
    recip: Data_DivisionRing.recip,
    Eq: Data_Eq.Eq,
    eq: Data_Eq.eq,
    notEq: Data_Eq.notEq,
    EuclideanRing: Data_EuclideanRing.EuclideanRing,
    degree: Data_EuclideanRing.degree,
    div: Data_EuclideanRing.div,
    gcd: Data_EuclideanRing.gcd,
    lcm: Data_EuclideanRing.lcm,
    mod: Data_EuclideanRing.mod,
    Field: Data_Field.Field,
    "const": Data_Function["const"],
    flip: Data_Function.flip,
    Functor: Data_Functor.Functor,
    flap: Data_Functor.flap,
    map: Data_Functor.map,
    "void": Data_Functor["void"],
    HeytingAlgebra: Data_HeytingAlgebra.HeytingAlgebra,
    conj: Data_HeytingAlgebra.conj,
    disj: Data_HeytingAlgebra.disj,
    not: Data_HeytingAlgebra.not,
    Monoid: Data_Monoid.Monoid,
    mempty: Data_Monoid.mempty,
    Ord: Data_Ord.Ord,
    between: Data_Ord.between,
    clamp: Data_Ord.clamp,
    compare: Data_Ord.compare,
    comparing: Data_Ord.comparing,
    max: Data_Ord.max,
    min: Data_Ord.min,
    EQ: Data_Ordering.EQ,
    GT: Data_Ordering.GT,
    LT: Data_Ordering.LT,
    Ring: Data_Ring.Ring,
    negate: Data_Ring.negate,
    sub: Data_Ring.sub,
    Semigroup: Data_Semigroup.Semigroup,
    append: Data_Semigroup.append,
    Semiring: Data_Semiring.Semiring,
    add: Data_Semiring.add,
    mul: Data_Semiring.mul,
    one: Data_Semiring.one,
    zero: Data_Semiring.zero,
    Show: Data_Show.Show,
    show: Data_Show.show,
    unit: Data_Unit.unit,
    absurd: Data_Void.absurd
};
